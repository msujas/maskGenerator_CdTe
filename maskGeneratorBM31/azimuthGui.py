# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'guiLayout.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os, time
if __name__ == '__main__':
    from azimuthalMaskGenerator import runRecursive
else:
    from .azimuthalMaskGenerator import runRecursive

def textToBool(val):
    if val == 'False':
        return False
    elif val == 'True':
        return True

class Worker(QtCore.QThread):
    outputs = QtCore.pyqtSignal(bool)
    def __init__(self,direc,poni, mask,gainFile,stdevs, threshold, nbins, outdir, saveMasks):
        super(Worker,self).__init__()
        self.direc = direc
        self.poni = poni
        self.mask = mask
        self.gainFile = gainFile
        self.stdevs = stdevs
        self.threshold = threshold
        self.nbins = nbins
        self.outdir = outdir
        self.saveMasks = saveMasks
    def run(self):
        self.running = True
        print('running')
        #direc, ponifile, maskfile, polarisation, gainfile, stdevs,scale, threshold, nbins, ext, outdir
        allFiles = []
        while True:
            newallFiles = runRecursive(self.direc,self.poni,self.mask, 0.99, self.gainFile, self.stdevs,10**5, self.threshold, self.nbins, outdir = self.outdir, saveMasks=self.saveMasks, 
                     cpp = True, allFiles=allFiles)
            if newallFiles != allFiles:
                print('finished, looking for new files')
            allFiles = newallFiles
            time.sleep(1)
        self.outputs.emit(True)
    def stop(self):
        self.terminate()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(625, 331)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.configFile = fr'{os.path.dirname(os.path.realpath(__file__))}/azGuiConf.log'

        self.directoryBox = QtWidgets.QLineEdit(self.centralwidget)
        self.directoryBox.setGeometry(QtCore.QRect(10, 20, 431, 20))
        self.directoryBox.setObjectName("directoryBox")
        
        self.dirButton = QtWidgets.QPushButton(self.centralwidget)
        self.dirButton.setGeometry(QtCore.QRect(450, 20, 21, 21))
        self.dirButton.setObjectName("dirButton")
        
        self.poniBox = QtWidgets.QLineEdit(self.centralwidget)
        self.poniBox.setGeometry(QtCore.QRect(10, 60, 431, 20))
        self.poniBox.setObjectName("poniBox")
        
        self.maskBox = QtWidgets.QLineEdit(self.centralwidget)
        self.maskBox.setGeometry(QtCore.QRect(10, 100, 431, 20))
        self.maskBox.setObjectName("maskBox")
        
        self.gainMapBox = QtWidgets.QLineEdit(self.centralwidget)
        self.gainMapBox.setGeometry(QtCore.QRect(10, 140, 431, 20))
        self.gainMapBox.setObjectName("gainMapBox")
        
        self.runButton = QtWidgets.QPushButton(self.centralwidget)
        self.runButton.setGeometry(QtCore.QRect(420, 230, 75, 23))
        self.runButton.setObjectName("runButton")

        self.stopButton = QtWidgets.QPushButton(self.centralwidget)
        self.stopButton.setGeometry(QtCore.QRect(500, 230, 75, 23))
        self.stopButton.setObjectName("stopButton")
        self.stopButton.setText('stop')
        self.stopButton.setEnabled(False)
        
        self.maskButton = QtWidgets.QPushButton(self.centralwidget)
        self.maskButton.setGeometry(QtCore.QRect(450, 100, 21, 21))
        self.maskButton.setObjectName("maskButton")
        
        self.poniButton = QtWidgets.QPushButton(self.centralwidget)
        self.poniButton.setGeometry(QtCore.QRect(450, 60, 21, 21))
        self.poniButton.setObjectName("poniButton")
        
        self.gainMapButton = QtWidgets.QPushButton(self.centralwidget)
        self.gainMapButton.setGeometry(QtCore.QRect(450, 140, 21, 21))
        self.gainMapButton.setObjectName("gainMapButton")
        
        self.directoryLabel = QtWidgets.QLabel(self.centralwidget)
        self.directoryLabel.setGeometry(QtCore.QRect(480, 20, 47, 13))
        self.directoryLabel.setObjectName("directoryLabel")
        
        self.poniLabel = QtWidgets.QLabel(self.centralwidget)
        self.poniLabel.setGeometry(QtCore.QRect(480, 60, 47, 13))
        self.poniLabel.setObjectName("poniLabel")
        
        self.maskLabel = QtWidgets.QLabel(self.centralwidget)
        self.maskLabel.setGeometry(QtCore.QRect(480, 100, 47, 13))
        self.maskLabel.setObjectName("maskLabel")
        
        self.gainLabel = QtWidgets.QLabel(self.centralwidget)
        self.gainLabel.setGeometry(QtCore.QRect(480, 140, 71, 16))
        self.gainLabel.setObjectName("gainLabel")

        self.stdevBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.stdevBox.setGeometry(QtCore.QRect(10, 170, 50 , 40))
        self.stdevBox.setObjectName('stdevBox')
        self.stdevBox.setDecimals(1)
        self.stdevBox.setSingleStep(1)
        self.stdevBox.setValue(3)
        self.stdevBox.setMinimum(1)
        self.stdevBox.adjustSize()

        self.stdevLabel = QtWidgets.QLabel(self.centralwidget)
        self.stdevLabel.setGeometry(QtCore.QRect(60, 170, 71, 16))
        self.stdevLabel.setObjectName("stdevLabel")
        self.stdevLabel.setText('no. stdevs')
        self.stdevLabel.adjustSize()

        self.threshBox = QtWidgets.QSpinBox(self.centralwidget)
        self.threshBox.setGeometry(QtCore.QRect(120, 170, 50 , 40))
        self.threshBox.setObjectName('threshBox')
        self.threshBox.setMaximum(1000)
        self.threshBox.setSingleStep(10)
        self.threshBox.setValue(100)
        self.threshBox.adjustSize()

        self.threshLabel = QtWidgets.QLabel(self.centralwidget)
        self.threshLabel.setGeometry(QtCore.QRect(175, 170, 71, 16))
        self.threshLabel.setObjectName("threshLabel")
        self.threshLabel.setText('threshold value (counts\nabove 1 stdev to mask)')
        self.threshLabel.adjustSize()

        self.binBox = QtWidgets.QSpinBox(self.centralwidget)
        self.binBox.setGeometry(QtCore.QRect(300, 170, 50 , 40))
        self.binBox.setObjectName('binBox')
        self.binBox.setMaximum(10000)
        self.binBox.setSingleStep(100)
        self.binBox.setValue(800)
        self.binBox.setMinimum(100)
        self.binBox.adjustSize()

        self.binLabel = QtWidgets.QLabel(self.centralwidget)
        self.binLabel.setGeometry(QtCore.QRect(355, 170, 71, 16))
        self.binLabel.setObjectName("binLabel")
        self.binLabel.setText('no. bins for\nmasking')
        self.binLabel.adjustSize()

        self.saveMasksBox = QtWidgets.QCheckBox(self.centralwidget)
        self.saveMasksBox.setGeometry(QtCore.QRect(420, 175, 20 , 20))
        self.saveMasksBox.setObjectName("saveMasksBox")
        self.saveMasksBox.setText("save masks")
        self.saveMasksBox.adjustSize()

        self.outdirBox = QtWidgets.QLineEdit(self.centralwidget)
        self.outdirBox.setGeometry(QtCore.QRect(10, 200, 40, 20))
        self.outdirBox.setObjectName("outdirBox")
        self.outdirBox.setText('xye')
        
        self.outdirLabel = QtWidgets.QLabel(self.centralwidget)
        self.outdirLabel.setGeometry(QtCore.QRect(60, 200, 71, 16))
        self.outdirLabel.setObjectName("outdirLabel")
        self.outdirLabel.setText('output directory')
        self.outdirLabel.adjustSize()

        self.runButton.clicked.connect(self.startWorker)
        self.stopButton.clicked.connect(self.stopWorker)
        self.dirButton.clicked.connect(self.selectFolder)
        self.poniButton.clicked.connect(self.selectPoni)
        self.maskButton.clicked.connect(self.selectMask)
        self.gainMapButton.clicked.connect(self.selectGainFile)

        self.running = False

        if os.path.exists(self.configFile):
            self.readConfig()

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 625, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "azimuthal mask generator"))
        self.dirButton.setText(_translate("MainWindow", "..."))
        self.runButton.setText(_translate("MainWindow", "Run"))
        self.maskButton.setText(_translate("MainWindow", "..."))
        self.poniButton.setText(_translate("MainWindow", "..."))
        self.gainMapButton.setText(_translate("MainWindow", "..."))
        self.directoryLabel.setText(_translate("MainWindow", "directory"))
        self.poniLabel.setText(_translate("MainWindow", "poni file"))
        self.maskLabel.setText(_translate("MainWindow", "mask file"))
        self.gainLabel.setText(_translate("MainWindow", "gain map file\n(optional)"))
        self.gainLabel.adjustSize()

    def startWorker(self):
        self.writeConfig()
        directory = self.directoryBox.text()
        ponifile = self.poniBox.text()
        maskfile = self.maskBox.text()
        gainfile = self.gainMapBox.text()
        outdir = self.outdirBox.text()
        if not gainfile:
            gainfile = None
        stdevs = self.stdevBox.value()
        threshold = self.threshBox.value()
        nbins = self.binBox.value()
        saveMasks = self.saveMasksBox.isChecked()
        self.runButton.setEnabled(False)
        self.stopButton.setEnabled(True)
        self.thread = Worker(directory, ponifile, maskfile, gainfile, stdevs, threshold, nbins, outdir, saveMasks)
        self.running = True
        self.thread.start()
        self.thread.outputs.connect(self.swapButtons)
    
    def stopWorker(self):
        self.thread.stop()
        self.swapButtons(True)

    def swapButtons(self, output):
        self.runButton.setEnabled(output)
        self.stopButton.setEnabled(not output)
    
    def selectFolder(self):
        if self.directoryBox.text():
            currentdir = self.directoryBox.text()
        else:
            currentdir = '.'
        dialog = QtWidgets.QFileDialog.getExistingDirectory(caption = 'select folder', directory=currentdir)
        if dialog:
            self.directoryBox.setText(dialog)
            self.writeConfig()
    def selectPoni(self):
        if self.poniBox.text():
            currentdir = os.path.dirname(self.poniBox.text())
        else:
            currentdir = '.'
        filter = "data file (*.poni)"
        dialog = QtWidgets.QFileDialog.getOpenFileName(caption = 'select poni file',filter = filter, directory=currentdir)
        if dialog[0]:
            self.poniBox.setText(dialog[0])
            self.writeConfig()

    def selectMask(self):
        if self.maskBox.text():
            currentdir = os.path.dirname(self.maskBox.text())
        else:
            currentdir = '.'
        filter = "data file (*.edf)"
        dialog = QtWidgets.QFileDialog.getOpenFileName(caption = 'select mask file',	filter = filter, directory=currentdir)
        if dialog[0]:
            self.maskBox.setText(dialog[0])
            self.writeConfig()

    def selectGainFile(self):
        if self.gainMapBox.text():
            currentdir = os.path.dirname(self.gainMapBox.text())
        else:
            currentdir = '.'
        print(currentdir)
        filter = "data file (*.edf)"
        dialog = QtWidgets.QFileDialog.getOpenFileName(caption = 'select gain map file',	filter = filter, directory=currentdir)
        if dialog[0]:
            self.gainMapBox.setText(dialog[0])
            self.updateConfig()
            self.writeConfig()


    def updateConfig(self):
        items = [self.directoryBox, self.poniBox, self.maskBox, self.gainMapBox, self.stdevBox, self.threshBox, self.binBox, self.outdirBox]
        self.confdct = {}
        for item in items:
            if type(item) == QtWidgets.QLineEdit:
                value = item.text()
            elif type(item) == QtWidgets.QSpinBox or type(item) == QtWidgets.QDoubleSpinBox:
                value = item.value()
            elif type(item) == QtWidgets.QCheckBox:
                value = item.isChecked()
            self.confdct[item] = [item.objectName(), value]
    
    def writeConfig(self):
        self.updateConfig()
        string = ''
        for item in self.confdct:
            string += f'{self.confdct[item][0]};{self.confdct[item][1]}\n'
        f = open(self.configFile,'w')
        f.write(string)
        f.close()
    def readConfig(self):
        self.updateConfig()
        f = open(self.configFile,'r')
        lines = f.readlines()
        f.close()
        for line in lines:
            line = line.replace('\n','')
            if not line:
                continue
            linesplit = line.split(';')
            name = linesplit[0]
            value = linesplit[1]
            for item in self.confdct:
                if name == item.objectName():
                    if type(item) == QtWidgets.QLineEdit:
                        item.setText(value)
                    elif type(item) == QtWidgets.QSpinBox:
                        item.setValue(int(value))
                    elif type(item) ==QtWidgets.QDoubleSpinBox:
                        item.setValue(float(value))
                    elif type(item) == QtWidgets.QCheckBox:
                        item.setChecked(textToBool(value))
        self.updateConfig()





def main():
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()

